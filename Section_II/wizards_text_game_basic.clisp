;; Define the nodes of the game world graph

(defparameter *nodes* '((living-room (you are in the living room.
	      	      	   a wizard is snoring loudly on the couch.))
		        (garden (you are in a beautiful garden.
			   there is a well in front of you.))
			(attic (you are in the attic.
			   there is a giant welding torch in the corner.))))

;; Define the edges of the game world graph

(defparameter *edges* '((living-room (garden west door)
	      	        	     (attic upstairs ladder))
                        (garden (living-room east door))
			(attic (living-room downstairs ladder))))

;; Define the game world's visible (and interactive) objects

(defparameter *objects* '(whiskey bucket frog chain))

;; Define the locations of the game world's visible objects

(defparameter *object-locations* '((whiskey living-room)
	      			   (bucket living-room)
				   (chain garden)
				   (frog garden)))

;; Define the default location of the player

(defparameter *location* 'living-room)

;; Define a 'describe-location' function

(defun describe-location (location nodes)
       (cadr (assoc location nodes)))

;; Define a 'describe-path' function with
;; quisiquoting!

(defun describe-path (edge)
       `(there is a ,(caddr edge) going ,(cadr edge) from here.))

;; Describe a 'describe-paths' plural function
(defun describe-paths (location edges)
       (apply #'append (mapcar #'describe-path (cdr (assoc location edges)))))


;; Define a 'objects-at' function

(defun objects-at (loc objs obj-locs)
       (labels ((at-loc-p (obj)
       	       (eq (cadr (assoc obj obj-locs)) loc)))
	(remove-if-not #'at-loc-p objs)))

;; Define a 'describe-objects' function to describe visible objects

(defun describe-objects (loc objs obj-loc)
       (labels ((describe-obj (obj)
       	       `(you see a ,obj on the floor.)))
	 (apply #'append (mapcar #'describe-obj (objects-at loc objs obj-loc)))))

;; Define a 'look' function for the player to use to
;; interact with the game world

(defun look()
       (append (describe-location *location* *nodes*)
       (describe-paths *location* *edges*)
       (describe-objects *location* *objects* *object-locations*)))

;; Define a 'walk' function for the player to use to move around
;; the game world using a keyword parameter!

(defun walk (direction)
       (let ((next (find direction
       	    	   	 (cdr (assoc *location* *edges*))
			 :key #'cadr)))

       (if next
       	   (progn (setf *location* (car next))
	   	  (look))
          '(you cannot go that way.))))

;; Define a 'pickup' function for the player
;; to pickup visible objects with

(defun pickup (object)
       (cond ((member object
       	     	      (objects-at *location* *objects* *object-locations*))
	       (push (list object 'body) *object-locations*)
	         `(you are now carrying the ,object))
	       (t '(you cannot get that.))))


;; Define an 'inventory' function to see what object the player
;; currently carries

(defun inventory ()
       (cons 'items- (objects-at 'body *objects* *object-locations*)))